---
import { events } from "../config/events";

interface Props {
	eventName: string;
}

const { eventName } = Astro.props;
// API base URL from environment variable
const API_BASE_URL = import.meta.env.PUBLIC_SWAGGER_API_URL || "";
// Find the event by name (case insensitive)
const currentEvent = events.find(
	(event) => event.name.toLowerCase() === (eventName?.toLowerCase() || ""),
);

// Define a custom URL for the AsyncAPI component to use
let asyncApiUrl = currentEvent?.url || "";
if (asyncApiUrl.startsWith("https://github.com")) {
	// Transform GitHub URLs to raw.githubusercontent.com
	const rawUrl = asyncApiUrl.replace(
		/https:\/\/github\.com\/([^\/]+)\/([^\/]+)\/blob\/([^\/]+)\/(.+)/,
		"https://raw.githubusercontent.com/$1/$2/$3/$4",
	);

	asyncApiUrl = rawUrl;
}

asyncApiUrl = `${API_BASE_URL}?url=${encodeURIComponent(asyncApiUrl)}`;
---

{!currentEvent ? (
    <div class="flex justify-center items-center h-full text-base-content/70 text-lg bg-base-100">
        Event not found
    </div>
) : (
    <div class="relative h-full">
        <!-- Loading overlay -->
        <div id="asyncapi-loading" class="absolute inset-0 flex items-center justify-center bg-base-100 z-10">
            <div class="flex flex-col items-center gap-3">
                <div class="loading loading-spinner loading-lg text-primary"></div>
                <span class="text-base-content/70">Loading event documentation...</span>
            </div>
        </div>
        
        <asyncapi-component
            id="asyncapi-viewer"
            schemaUrl={asyncApiUrl}
            config='{"show": {"info": false}}'
            schemaFetchOptions='{"method":"GET","mode":"cors"}'
            cssImportPath="https://unpkg.com/@asyncapi/react-component@latest/styles/default.min.css">
        </asyncapi-component>
    </div>
    <script src="https://unpkg.com/@asyncapi/web-component@latest/lib/asyncapi-web-component.js" defer></script>
    <script>
      /**
      * @description Initialize the AsyncAPI theme based on the current theme controller state
      **/
      document.addEventListener('DOMContentLoaded', function() {
        initializeAsyncApiTheme();
        initializeLoadingState();
      });
      
      // Also try to initialize immediately if DOM is already loaded
      if (document.readyState !== 'loading') {
        initializeAsyncApiTheme();
        initializeLoadingState();
      }

      function initializeLoadingState() {
        var asyncapi = document.getElementById('asyncapi-viewer');
        var loadingElement = document.getElementById('asyncapi-loading');
        
        if (asyncapi && loadingElement) {
          // Use MutationObserver to detect when the AsyncAPI component has rendered content
          var observer = new MutationObserver(function(mutations) {
            var hasContent = false;
            
            // Check if the component has rendered any meaningful content
            mutations.forEach(function(mutation) {
              if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                // Look for actual content being added (not just empty divs)
                mutation.addedNodes.forEach(function(node) {
                  if (node.nodeType === Node.ELEMENT_NODE) {
                    var element = node as Element;
                    // Check if the element has meaningful content or nested elements
                    if (element.children.length > 0 || element.textContent?.trim()) {
                      hasContent = true;
                    }
                  }
                });
              }
            });
            
            // If content is detected, hide the loading overlay
            if (hasContent && loadingElement) {
              loadingElement.style.display = 'none';
              observer.disconnect();
            }
          });
          
          // Start observing the AsyncAPI component
          observer.observe(asyncapi, { 
            childList: true, 
            subtree: true,
            characterData: true 
          });
          
          // Fallback: Hide loading after 10 seconds regardless
          setTimeout(function() {
            var currentLoadingElement = document.getElementById('asyncapi-loading');
            if (currentLoadingElement) {
              currentLoadingElement.style.display = 'none';
            }
            observer.disconnect();
          }, 10000);
          
          // Additional check: Hide loading if component already has content
          setTimeout(function() {
            var currentLoadingElement = document.getElementById('asyncapi-loading');
            if (asyncapi && asyncapi.children.length > 0 && currentLoadingElement) {
              currentLoadingElement.style.display = 'none';
              observer.disconnect();
            }
          }, 1000);
        }
      }

      function updateAsyncApiTheme(isDark:boolean):any {
        var asyncapi = document.getElementById('asyncapi-viewer');
        if (asyncapi) {
          var cssPath = isDark
            ? '/styles/async-api-dark-theme.css'
            : 'https://unpkg.com/@asyncapi/react-component@latest/styles/default.min.css';
          
          // Set the attribute immediately
          asyncapi.setAttribute('cssImportPath', cssPath);
          
          // Also try again after a short delay to ensure it takes effect
          setTimeout(function() {
            if (asyncapi) {
              asyncapi.setAttribute('cssImportPath', cssPath);
            }
          }, 50);
        }
      }

      function getCurrentTheme():boolean {
        // Check if light theme is selected
        var lightThemeController = document.querySelector('input.theme-controller[value="light"]') as HTMLInputElement;
        if (lightThemeController && lightThemeController.checked) {
          return false; // Light theme
        }
        
        // Check if dark theme is selected
        var darkThemeController = document.querySelector('input.theme-controller[value="dark"]') as HTMLInputElement;
        if (darkThemeController && darkThemeController.checked) {
          return true; // Dark theme
        }
        
        // Fallback to system preference
        return window.matchMedia('(prefers-color-scheme: dark)').matches;
      }

      function initializeAsyncApiTheme() {
        var asyncapi = document.getElementById('asyncapi-viewer');
        if (asyncapi) {
          var isDark = getCurrentTheme();
          var cssPath = isDark
            ? '/styles/async-api-dark-theme.css'
            : 'https://unpkg.com/@asyncapi/react-component@latest/styles/default.min.css';
          
          // Set the initial attribute
          asyncapi.setAttribute('cssImportPath', cssPath);
          
          // Also wait for the component to be fully loaded and try again
          setTimeout(function() {
            if (asyncapi) {
              asyncapi.setAttribute('cssImportPath', cssPath);
            }
          }, 100);
          
          // Use a more robust approach with MutationObserver to detect when the component is ready
          var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
              if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                // Component has been rendered, apply theme again
                if (asyncapi) {
                  asyncapi.setAttribute('cssImportPath', cssPath);
                }
              }
            });
          });
          
          // Observe changes to the asyncapi component
          if (asyncapi) {
            observer.observe(asyncapi, { childList: true, subtree: true });
          }
          
          // Stop observing after 5 seconds to prevent memory leaks
          setTimeout(function() {
            observer.disconnect();
          }, 5000);
        }
      }

      // Watch for theme controller changes
      function watchThemeControllers() {
        var themeControllers = document.querySelectorAll('input.theme-controller');
        themeControllers.forEach(function(controller) {
          controller.addEventListener('change', function() {
            updateAsyncApiTheme(getCurrentTheme());
          });
        });
      }

      // Initialize theme watchers when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', watchThemeControllers);
      } else {
        watchThemeControllers();
      }

      // Also keep system preference fallback
      if(window.matchMedia){
        var colorSchemeQuery = window.matchMedia('(prefers-color-scheme: dark)');
        colorSchemeQuery.addEventListener('change', function(ev:MediaQueryListEvent) {
          // Only update if no theme controller is explicitly selected
          var hasExplicitTheme = document.querySelector('input.theme-controller:checked');
          if (!hasExplicitTheme) {
            updateAsyncApiTheme(ev.matches);
          }
        });
      }
    </script>
)}

<style>
    .loading {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        font-size: 1.25rem;
        color: #6b7280;
    }
</style>

<link rel="preload" href="/styles/async-api-dark-theme.css" as="style">
---
import { ServerCog, Zap } from '@lucide/astro';
import type { ApiItem } from "../config/apis";
import type { EventItem } from '../config/events';
import SidebarSection from './SidebarSection.astro';

interface Props {
	apis: ApiItem[];
	selectedApiName: string | null;
	events: EventItem[];
	selectedEventName: string | null;
}

const { apis, selectedApiName, events, selectedEventName } = Astro.props;

// Function to get a deterministic color based on API name
function getApiColor(name: string): string {
    // Array of tailwind color classes
    const colors = [
        'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300',
        'bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300',
        'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300',
        'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300',
        'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/30 dark:text-indigo-300',
        'bg-pink-100 text-pink-700 dark:bg-pink-900/30 dark:text-pink-300',
        'bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300',
        'bg-teal-100 text-teal-700 dark:bg-teal-900/30 dark:text-teal-300',
        'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300',
        'bg-cyan-100 text-cyan-700 dark:bg-cyan-900/30 dark:text-cyan-300'
    ];
    
    // Use a hash of the name to pick a color deterministically
    const hash = name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
    return colors[hash % colors.length];
}

// Function to get a deterministic color for events
function getEventColor(name: string): string {
    const colors = [
        'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300',
        'bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300',
        'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300',
        'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300',
        'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/30 dark:text-indigo-300',
        'bg-pink-100 text-pink-700 dark:bg-pink-900/30 dark:text-pink-300',
        'bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300',
        'bg-teal-100 text-teal-700 dark:bg-teal-900/30 dark:text-teal-300',
        'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300',
        'bg-cyan-100 text-cyan-700 dark:bg-cyan-900/30 dark:text-cyan-300'
    ];
    const hash = name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
    return colors[hash % colors.length];
}

// Function to get indicator and gradient colors based on API color
function getIndicatorColors(apiColor: string): { indicator: string, gradient: string } {
    const colorMap: Record<string, { indicator: string, gradient: string }> = {
        'bg-red-100': { 
            indicator: 'bg-red-500 shadow-[0_0_8px_rgba(239,68,68,0.4)]', 
            gradient: 'from-red-50 dark:from-red-900/20' 
        },
        'bg-blue-100': { 
            indicator: 'bg-blue-500 shadow-[0_0_8px_rgba(59,130,246,0.4)]', 
            gradient: 'from-blue-50 dark:from-blue-900/20' 
        },
        'bg-green-100': { 
            indicator: 'bg-green-500 shadow-[0_0_8px_rgba(34,197,94,0.4)]', 
            gradient: 'from-green-50 dark:from-green-900/20' 
        },
        'bg-yellow-100': { 
            indicator: 'bg-yellow-500 shadow-[0_0_8px_rgba(234,179,8,0.4)]', 
            gradient: 'from-yellow-50 dark:from-yellow-900/20' 
        },
        'bg-indigo-100': { 
            indicator: 'bg-indigo-500 shadow-[0_0_8px_rgba(99,102,241,0.4)]', 
            gradient: 'from-indigo-50 dark:from-indigo-900/20' 
        },
        'bg-pink-100': { 
            indicator: 'bg-pink-500 shadow-[0_0_8px_rgba(236,72,153,0.4)]', 
            gradient: 'from-pink-50 dark:from-pink-900/20' 
        },
        'bg-purple-100': { 
            indicator: 'bg-purple-500 shadow-[0_0_8px_rgba(168,85,247,0.4)]', 
            gradient: 'from-purple-50 dark:from-purple-900/20' 
        },
        'bg-teal-100': { 
            indicator: 'bg-teal-500 shadow-[0_0_8px_rgba(20,184,166,0.4)]', 
            gradient: 'from-teal-50 dark:from-teal-900/20' 
        },
        'bg-orange-100': { 
            indicator: 'bg-orange-500 shadow-[0_0_8px_rgba(249,115,22,0.4)]', 
            gradient: 'from-orange-50 dark:from-orange-900/20' 
        },
        'bg-cyan-100': { 
            indicator: 'bg-cyan-500 shadow-[0_0_8px_rgba(6,182,212,0.4)]', 
            gradient: 'from-cyan-50 dark:from-cyan-900/20' 
        }
    };
    
    const baseColor = apiColor.split(' ')[0];
    return colorMap[baseColor] || { 
        indicator: 'bg-purple-500 shadow-[0_0_8px_rgba(168,85,247,0.4)]', 
        gradient: 'from-purple-50 dark:from-purple-900/20' 
    };
}
---
<aside class="h-screen flex flex-col bg-white dark:bg-zinc-800 border-r border-gray-200 dark:border-zinc-700 overflow-hidden shrink-0 transition-all duration-300 md:w-64 w-16" data-shade="925">
    <div class="flex-grow overflow-auto">
        <!-- Global Search Input -->
        <div class="px-4 py-2 bg-white dark:bg-zinc-800 sticky top-0 z-10">
            <input id="global-search" type="text" placeholder="Search APIs or Events..." class="w-full px-3 py-2 rounded border border-gray-200 dark:border-zinc-700 bg-gray-50 dark:bg-zinc-900 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 dark:focus:ring-blue-600 transition" />
        </div>
        <!-- APIs Section -->
        <SidebarSection
            items={apis}
            sectionTitle="APIs"
            listId="api-list"
            getColor={getApiColor}
            getIndicatorColors={getIndicatorColors}
            selectedName={selectedApiName}
            linkPrefix="apis"
            emptyText="No APIs configured."
        >
            <ServerCog slot="icon" class="h-4 w-4 text-blue-500" />
        </SidebarSection>
        <!-- Events Section -->
        <SidebarSection
            items={events}
            sectionTitle="Events"
            listId="event-list"
            getColor={getEventColor}
            getIndicatorColors={getIndicatorColors}
            selectedName={selectedEventName}
            linkPrefix="events"
            emptyText="No events configured."
        >
            <Zap slot="icon" class="h-4 w-4 text-yellow-500" />
        </SidebarSection>
    </div>
</aside>

<script>
    // Handle the indicator positioning
    function updateIndicator() {
        const selectedItem = document.querySelector('.api-selected');
        const indicator = document.getElementById('api-indicator');
        if (selectedItem && indicator) {
            indicator.style.top = `${(selectedItem as HTMLElement).offsetTop}px`;
            indicator.style.height = `${(selectedItem as HTMLElement).offsetHeight}px`;
            indicator.style.opacity = '1';
        }
    }

    document.addEventListener('DOMContentLoaded', updateIndicator);
    window.addEventListener('resize', updateIndicator);

    // Global search filter logic for APIs and Events
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('global-search') as HTMLInputElement;
        const lists = [
            document.getElementById('api-list'),
            document.getElementById('event-list')
        ];
        if (searchInput && lists.every(Boolean)) {
            searchInput.addEventListener('input', function() {
                const filter = searchInput.value.toLowerCase();
                lists.forEach(list => {
                    if (!list) return;
                    const items = list.querySelectorAll('li');
                    items.forEach(function(item) {
                        const name = (item as HTMLElement).dataset.name || '';
                        if (name.toLowerCase().includes(filter)) {
                            item.style.display = '';
                        } else {
                            item.style.display = 'none';
                        }
                    });
                });
            });
        }
    });
</script> 
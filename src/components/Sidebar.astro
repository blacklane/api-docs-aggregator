---
import { Search, ServerCog, Zap } from "@lucide/astro";
import type { ApiItem } from "../config/apis";
import type { EventItem } from "../config/events";
import SidebarSection from "./SidebarSection.astro";

interface Props {
  apis: ApiItem[];
  selectedApiName: string | null;
  events: EventItem[];
  selectedEventName: string | null;
}

const { apis, selectedApiName, events, selectedEventName } = Astro.props;
---

<div class="drawer-side z-30 scrollbar-thin scrollbar scrollbar-thumb-base-300 scrollbar-track-base-100">
  <label for="left-sidebar-drawer" class="drawer-overlay"></label>
  <!-- Unified menu with collapsible sections -->
  <!-- Global Search Input -->
  <ul class="menu max-w-80 bg-base-100 rounded-none p-0">
    <li class="h-16 px-4 py-4 bg-base-100 sticky top-0 z-20">
      <label
        class="input bg-base-200 text-sm focus:outline-none focus:ring-2 focus:ring-primary cursor-pointer"
        id="sidebar-search-container"
      >
        <Search slot="icon" class="h-4 w-4 text-blue-500" />
        <input 
          id="sidebar-search" 
          type="search" 
          class="grow cursor-pointer" 
          placeholder="Search" 
        />
        <kbd class="kbd kbd-sm">âŒ˜</kbd>
        <kbd class="kbd kbd-sm">K</kbd>
      </label>
    </li>
    <SidebarSection
      items={apis}
      sectionTitle="APIs"
      selectedName={selectedApiName}
      linkPrefix="apis"
      emptyText="No APIs configured."
    >
      <ServerCog slot="icon" class="h-4 w-4 text-blue-500" />
    </SidebarSection>
    <SidebarSection
      items={events}
      sectionTitle="Events"
      selectedName={selectedEventName}
      linkPrefix="events"
      emptyText="No events configured."
    >
      <Zap slot="icon" class="h-4 w-4 text-yellow-500" />
    </SidebarSection>
  </ul>
</div>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('sidebar-search');
  const searchContainer = document.getElementById('sidebar-search-container');
  
  if (!searchInput || !searchContainer) return;

  // Handle click and focus on search input to open command palette
  const openCommandPalette = (e) => {
    e.preventDefault();
    e.stopPropagation();
    // Blur the input to prevent cursor from appearing
    searchInput.blur();
    // Dispatch custom event to open command palette
    window.dispatchEvent(new CustomEvent('openCommandPalette'));
  };

  searchInput.addEventListener('click', openCommandPalette);
  searchInput.addEventListener('focus', openCommandPalette);
  searchContainer.addEventListener('click', openCommandPalette);

  // Prevent typing in the search input since we use the command palette
  searchInput.addEventListener('keydown', (e) => {
    // Allow Cmd+K and Ctrl+K to pass through
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      return;
    }
    // Prevent all other typing
    e.preventDefault();
    // Open command palette on any key press
    openCommandPalette(e);
  });

  // Keep the data-name filtering for backward compatibility if needed
  // This is now mainly for fallback purposes
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.toLowerCase();
    document.querySelectorAll('[data-name]').forEach((el) => {
      const name = el.getAttribute('data-name');
      el.style.display = name.includes(query) ? '' : 'none';
    });
  });
});
</script>
